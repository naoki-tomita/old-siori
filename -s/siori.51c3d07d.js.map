{"version":3,"sources":["src/Map.ts","src/Utils.ts","src/Store.tsx","src/components/Search.tsx","src/components/App.tsx","index.tsx"],"names":[],"mappings":"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","file":"siori.51c3d07d.js","sourceRoot":"..","sourcesContent":["export let map: google.maps.Map;\nlet _places: google.maps.places.PlacesService;\nlet _directions: google.maps.DirectionsService;\nexport let directionsRenderer: google.maps.DirectionsRenderer;\nexport let _autoComplete: google.maps.places.AutocompleteService;\n\n\nexport function initServices() {\n  map = new google.maps.Map(document.getElementById(\"map\")!, {\n    center: { lng: 138, lat: 38 },\n    zoom: 6,\n    streetViewControl: false,\n    mapTypeControl: false,\n    fullscreenControl: false,\n  });\n  _places = new google.maps.places.PlacesService(map);\n  _autoComplete = new google.maps.places.AutocompleteService();\n  _directions = new google.maps.DirectionsService();\n  directionsRenderer = new google.maps.DirectionsRenderer({ map });\n}\n\nclass Places {\n  async getDetails(placeId: string) {\n    return new Promise<google.maps.places.PlaceResult>(ok =>\n      _places.getDetails({ placeId }, results => ok(results)));\n  }\n  async textSearch(query: string) {\n    return new Promise<google.maps.places.PlaceResult[]>(ok =>\n      _places.textSearch({ query, location: map.getCenter(), radius: 200 }, results => ok(results)));\n  }\n}\n\nclass Directions {\n  async route(req: google.maps.DirectionsRequest) {\n    return new Promise<{\n      result: google.maps.DirectionsResult,\n      status: google.maps.DirectionsStatus\n    }>(ok =>\n      _directions.route(req, (result, status) => ok({ result, status })));\n  }\n}\n\nclass AutoComplete {\n  async getPlacePredictions(keyword: string) {\n    return new Promise<google.maps.places.AutocompletePrediction[]>(ok =>\n      _autoComplete.getPlacePredictions({\n        input: keyword,\n        location: map.getCenter(),\n        bounds: map.getBounds() || undefined\n      }, results => ok(results))\n    );\n  }\n}\n\nexport const places = new Places();\nexport const directions = new Directions();\nexport const autocomplete = new AutoComplete();\n","export function zip<T1, T2>(a1: T1[], a2: T2[]): Array<[T1, T2]> {\n  const dst: Array<[T1, T2]> = [];\n  for (let i = 0; i < Math.max(a1.length, a2.length); i++) {\n    dst.push([a1[i], a2[i]]);\n  }\n  return dst;\n}\n","import * as React from \"react\";\nimport { places, map, directions, directionsRenderer, autocomplete } from \"./Map\";\nimport marker from \"../marker.svg\";\nimport debounce from \"lodash.debounce\";\nimport { zip } from \"./Utils\";\nconst { createContext, useState, useContext: useContextOriginal, useEffect } = React;\n\ninterface AppStore {\n  map: MapStore;\n}\n\nconst Context = createContext<AppStore>({} as any);\nconst { Provider } = Context;\n\nexport const StoreProvider: React.FC = ({ children }) => {\n  const map = useMap();\n  return <Provider value={{ map }}>{children}</Provider>;\n};\n\nexport function useContext() {\n  return useContextOriginal(Context);\n}\n\ntype PlaceResult = google.maps.places.PlaceResult;\ntype AutoCompletePrediction = google.maps.places.AutocompletePrediction;\ntype DirectionResult = google.maps.DirectionsResult;\n\ninterface MapState {\n  autocompleteResults: AutoCompletePrediction[];\n  selectedLocations: PlaceResult[];\n  limitedRoutes: Array<\"start\" | \"end\" | \"waypoint\" | \"unknown\">;\n  currentLocation: PlaceResult | null;\n  directions: DirectionResult | null;\n  markers: google.maps.Marker[];\n}\n\ninterface MapAction {\n  autocomplete(keyword: string): void;\n  select(id: string): void;\n  remove(place: PlaceResult): void;\n  switch(from: number, to: number): void;\n  limitedRoute(placeId: string): void;\n}\n\ntype MapStore = MapState & MapAction;\n\nfunction useMap(): MapStore {\n  const [state, setState] = useState<MapState & { route: string[] }>({\n    autocompleteResults: [],\n    selectedLocations: [],\n    limitedRoutes: [],\n    currentLocation: null,\n    directions: null,\n    markers: [],\n    route: []\n  });\n\n  function createBounds(places: PlaceResult[]) {\n    if (places.length === 0) {\n      return new google.maps.LatLngBounds();\n    }\n    const bounds = new google.maps.LatLngBounds(places[0].geometry?.location);\n    places.forEach(it => it.geometry && bounds.extend(it.geometry.location));\n    return bounds;\n  }\n\n  function hideMarkers() {\n    state.markers.forEach(it => it.setMap(null));\n  }\n\n  function createMarkers(places: PlaceResult[], map?: google.maps.Map, icon?: google.maps.Icon) {\n    return places.map(it =>\n      new google.maps.Marker({ position: it.geometry?.location, map, icon })\n    );\n  }\n\n  function fitBounds(places: PlaceResult[]) {\n    if (places.length === 0) {\n      map.panTo({ lng: 138, lat: 38 });\n      map.setZoom(6);\n    } else {\n      map.fitBounds(createBounds(places));\n      (map.getZoom() > 16) && map.setZoom(16);\n    }\n  }\n\n  async function route(places: PlaceResult[]) {\n    return await directions.route({\n      origin: places[0].geometry?.location,\n      waypoints: places.slice(1, -1).map(it => ({ location: it.geometry?.location, stopover: false })),\n      destination: places[places.length - 1].geometry?.location,\n      travelMode: google.maps.TravelMode.DRIVING,\n    });\n  }\n\n  const searchAutoComplete = debounce(async (keyword: string) => {\n    const autocompleteResults = await autocomplete.getPlacePredictions(keyword);\n    if (Array.isArray(autocompleteResults)) {\n      setState({ ...state, autocompleteResults });\n    }\n  }, 400);\n\n  async function update(selectedLocations: PlaceResult[], fromTo: string[]) {\n    hideMarkers();\n    const markers = createMarkers(\n      selectedLocations, map,\n      { url: marker, scaledSize: new google.maps.Size(30, 30) }\n    );\n    let result: DirectionResult | null = null;\n    // set list before calcurating direction. for draggable list.\n    setState({ ...state, selectedLocations: selectedLocations, route: fromTo });\n    if (selectedLocations.length > 1) {\n      const routeType = calcurateLimitedRoutes(fromTo);\n      const routePlaces = (routeType.includes(\"start\") && routeType.includes(\"end\"))\n        ? zip(selectedLocations, routeType).filter(([_, type]) => type !== \"unknown\").map(([place]) => place)\n        : selectedLocations;\n      result = (await route(routePlaces)).result;\n      directionsRenderer.setDirections(result);\n      directionsRenderer.setMap(map);\n    } else {\n      directionsRenderer.setMap(null);\n    }\n    fitBounds(selectedLocations);\n    setState({\n      ...state,\n      selectedLocations: selectedLocations,\n      route: fromTo,\n      markers,\n      autocompleteResults: [],\n      directions: result,\n    });\n  }\n\n  async function setSelectedLocation(places: PlaceResult[]) {\n    update(places, state.route);\n  }\n\n  function calcurateLimitedRoutes(route: string[]) {\n    let foundStart = false;\n    let foundEnd = false;\n    return state.selectedLocations.map(it => {\n      if (!foundStart) {\n        if (route.includes(it.place_id || \"dummy\")) {\n          foundStart = true;\n          return \"start\";\n        }\n      } else if (!foundEnd) {\n        if (route.includes(it.place_id || \"dummy\")) {\n          foundEnd = true;\n          return \"end\";\n        } else if (route.length === 2) {\n          return \"waypoint\";\n        }\n      }\n      return \"unknown\";\n    });\n  }\n\n  return {\n    ...state,\n    limitedRoutes: calcurateLimitedRoutes(state.route),\n    async autocomplete(keyword) {\n      searchAutoComplete(keyword);\n    },\n    async select(placeId: string) {\n      const place = await places.getDetails(placeId);\n      const selectedLocations = [...state.selectedLocations, place];\n      setSelectedLocation(selectedLocations);\n    },\n    async remove(place: PlaceResult) {\n      setSelectedLocation(state.selectedLocations.filter(it => it.place_id !== place.place_id))\n    },\n    async switch(from, to) {\n      const tmpList = [...state.selectedLocations];\n      const item = tmpList.splice(from, 1);\n      tmpList.splice(to, 0, ...item);\n      setSelectedLocation(tmpList);\n    },\n    limitedRoute(id) {\n      const { route } = state;\n      if (route.includes(id)) {\n        update(state.selectedLocations, [...route.filter(it => it !== id)])\n      } else if (route.length !== 2) {\n        update(state.selectedLocations, [...route, id])\n      }\n    }\n  };\n}\n","import * as React from \"react\";\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Autocomplete, { AutocompleteChangeReason } from '@material-ui/lab/Autocomplete';\nimport { useContext } from \"../Store\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DirectionsCarIcon from '@material-ui/icons/DirectionsCar';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport { Container, Draggable } from \"react-smooth-dnd\";\n\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport { zip } from \"../Utils\";\nconst { useState } = React;\n\ninterface State {\n  searchText: string;\n}\n\nexport const Search: React.FC = () => {\n  return (\n    <>\n    <SelectedLocationList />\n    <AutoCompleteLocationSearch />\n    <DirectionInformation />\n    </>\n  );\n}\n\nconst SelectedLocationList: React.FC = () => {\n  const { map } = useContext();\n  console.log(map.limitedRoutes)\n  return (\n    <List>\n      <Container\n        onDrop={({ removedIndex, addedIndex }) => (\n          removedIndex != null && addedIndex != null\n          && map.switch(removedIndex, addedIndex))\n      }>\n        {zip(map.selectedLocations, map.limitedRoutes).map(([it, limitedRoute], i) =>\n          <Draggable key={i}>\n            <ListItem style={{ cursor: \"pointer\" }}>\n              <ListItemIcon onClick={() => map.limitedRoute(it.place_id!)}>\n                <IconButton edge=\"end\" aria-label=\"delete\">\n                  {limitedRoute === \"waypoint\"\n                    ? <MoreVertIcon />\n                    : limitedRoute === \"unknown\"\n                      ? <RadioButtonUncheckedIcon />\n                      : <RadioButtonCheckedIcon />\n                  }\n                </IconButton>\n              </ListItemIcon>\n              <ListItemText>{it.name}</ListItemText>\n              <ListItemSecondaryAction onClick={() => map.remove(it)}>\n                <IconButton edge=\"end\" aria-label=\"delete\">\n                  <DeleteIcon />\n                </IconButton>\n              </ListItemSecondaryAction>\n            </ListItem>\n          </Draggable>\n        )}\n      </Container>\n    </List>\n  );\n}\n\nconst DirectionInformation: React.FC = () => {\n  const { map } = useContext();\n  return (map.directions && map.directions?.routes[0] &&\n    <List component=\"div\">\n      <ListItem>\n        <ListItemIcon>\n          <DirectionsCarIcon />\n        </ListItemIcon>\n        <ListItemText\n          primary={map.directions?.routes[0].legs[0].distance.text}\n          secondary={map.directions?.routes[0].legs[0].duration.text}\n        />\n      </ListItem>\n    </List>\n  ) || null;\n}\n\nconst AutoCompleteLocationSearch: React.FC = () => {\n  const [state, setState] = useState<State>({ searchText: \"\" });\n  const { map } = useContext();\n  return (\n    <Autocomplete<google.maps.places.AutocompletePrediction>\n      options={map.autocompleteResults}\n      getOptionLabel={option => option.structured_formatting.main_text}\n      style={{ width: 300, margin: \"0 15px 0 15px\" }}\n      autoComplete\n      includeInputInList\n      inputValue={state.searchText}\n      onChange={(\n        _: any,\n        option: google.maps.places.AutocompletePrediction | null,\n        reason: AutocompleteChangeReason) =>\n          ((reason === \"select-option\" && option)\n            && (setState({ ...state, searchText: \"\" }), map.select(option.place_id)))}\n      renderOption={option => (\n        <LocationOption\n          main={option.structured_formatting.main_text}\n          secondery={option.structured_formatting.secondary_text}\n        />\n      )}\n      renderInput={params =>\n        <TextField {...params}\n          label=\"経由地を追加する\"\n          value={state.searchText}\n          onChange={e => (\n            setState({ searchText: e.target.value }),\n            map.autocomplete(e.target.value)\n          )}\n        />}\n    />\n  );\n}\n\nconst LocationOption: React.FC<{ main: string; secondery: string }> = ({ main, secondery }) => {\n  return (\n    <Grid container alignItems=\"center\">\n      <Grid item>\n        <LocationOnIcon />\n      </Grid>\n      <Grid item xs>\n        <Typography variant=\"body1\">\n          {main}\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          {secondery}\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n}\n","import * as React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport { Search } from \"./Search\";\nimport { StoreProvider } from \"../Store\";\nconst { useState } = React;\n\ninterface State {\n  isDrawerOpen: boolean;\n}\n\nexport const App: React.FunctionComponent<{ map: google.maps.Map }> = ({ map }) => {\n  const [state, setState] = useState<State>({ isDrawerOpen: false });\n  return (\n    <StoreProvider>\n    <Button\n      variant=\"contained\"\n      color=\"default\"\n      style={{\n        position: \"relative\",\n        zIndex: 1,\n        left: -36,\n        top: 120,\n        height: 60\n      }}\n      onClick={() => setState({ isDrawerOpen: !state.isDrawerOpen })}\n    >\n      {state.isDrawerOpen\n        ? <ChevronLeftIcon style={{ position: \"relative\", left: 18 }} />\n        : <ChevronRightIcon style={{ position: \"relative\", left: 18 }} />}\n    </Button>\n    <Drawer\n      anchor=\"left\"\n      open={state.isDrawerOpen}\n      variant=\"persistent\"\n    >\n      <Button\n        variant=\"contained\"\n        color=\"default\"\n        onClick={() => setState({ isDrawerOpen: !state.isDrawerOpen })}\n        style={{ margin: \"8px 15px 8px 15px\" }}\n      ><ChevronLeftIcon/></Button>\n      <Search />\n    </Drawer>\n    </StoreProvider>\n  );\n}\n","import { Loader } from \"@googlemaps/loader\";\nimport * as React from \"react\";\nimport { render } from \"react-dom\";\nimport { App } from \"./src/components/App\";\nimport { initServices } from \"./src/Map\";\n\nasync function main() {\n  const loader = new Loader({\n    apiKey: process.env.API_KEY!,\n    libraries: [\"places\"]\n  });\n  await loader.load();\n  initServices();\n  render(<App map={{} as any}/>, document.getElementById(\"app\"))\n}\n\nmain();\n"]}